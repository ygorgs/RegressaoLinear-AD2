dados <- read.table("dados.txt", header=T, dec=".")
qplot(dados$lcavol, dados$lpsa, xlab = "lcavol", ylab ="PSA") + geom_smooth(method="lm", se=FALSE)
library(ggplot2)
library(dplyr)
library(gmodels)
library(gridExtra)
library(corrplot)
qplot(dados$lcavol, dados$lpsa, xlab = "lcavol", ylab ="PSA") + geom_smooth(method="lm", se=FALSE)
nums <- sapply(dados, is.numeric)
correlations <- cor(dados[,nums])
corrplot(correlations, order="hclust")
dados_treino <- filter(dados, train == TRUE)
dados_treino <- filter(dados, train)
dados_treino <- filter(dados, train == "TRUE")
dados$train
library(ggplot2)
library(dplyr)
library(gmodels)
library(gridExtra)
library(corrplot)
dados_treino <- filter(dados, train == TRUE)
View(dados_treino)
plot_vol <- qplot(dados_treino$lcavol, dados_treino$lpsa, xlab = "lcavol", ylab ="PSA")
qplot(dados_treino$lcavol, dados_treino$lpsa, xlab = "lcavol", ylab ="PSA")
install.packages("caret")
library(caret)
library(caret)
install.packages("nloptr")
library(caret)
plot_vol <- qplot(dados$lcavol, dados$lpsa, xlab = "lcavol", ylab ="PSA")
plot_weight <- qplot(dados$lweight, dados$lpsa, xlab = "lweight", ylab ="PSA")
plot_age <- qplot(dados$age, dados$lpsa, xlab = "age", ylab ="PSA")
plot_bph <- qplot(dados$lbph, dados$lpsa, xlab = "lbph", ylab ="PSA")
plot_svi <- qplot(dados$svi, dados$lpsa, xlab = "svi", ylab ="PSA")
plot_cp <- qplot(dados$lcp, dados$lpsa, xlab = "lcp", ylab ="PSA")
plot_gleason <- qplot(dados$gleason, dados$lpsa, xlab = "gleason", ylab ="PSA")
plot_pgg45 <- qplot(dados$pgg45, dados$lpsa, xlab = "pgg45", ylab ="PSA")
plot_vol + geom_abline(method="lm", se=FALSE)
plot_vol + geom_smooth(method="lm", se=FALSE)
volume <- dados$lcavol
psa <- dados$lpsa
reg_linear <- lm(psa ~ volume)
reg_linear
qplot(dados_treino$lcavol, dados_treino$lpsa, xlab = "lcavol", ylab ="PSA")
qplot(dados_treino$lcavol, dados_treino$lpsa, xlab = "lcavol", ylab ="PSA")
plot(dados_treino$lcavol, dados_treino$lpsa, xlab = "lcavol", ylab ="PSA")
abline(reg_linear)
summary(reg_linear)
predicoes <- predict.lm(reg_linear, dados)
residuos = volume - predicoes
qplot(volume, predicoes)
qplot(volume, predicoes)
axisRange <- extendrange(c(volume, predicoes))
axisRange
#definindo variáveis
volume <- dados$lcavol
psa <- dados$lpsa
#obtendo a regressão linear
reg_linear <- lm(psa ~ volume)
#predições
predicoes <- predict.lm(reg_linear, dados)
#resíduos
residuos = volume - predicoes
qplot(volume, predicoes)
qplot(predicoes, residuos)
plot(predicoes, residuos)
volume <- dados_treino$lcavol
psa <- dados_treino$lpsa
reg_linear <- lm(psa ~ volume)
predicoes <- predict.lm(reg_linear, dados_treino)
residuos <- volume - predicoes
plot(predicoes, volume)
volume <- dados$lcavol
psa <- dados$lpsa
#obtendo a regressão linear
reg_linear <- lm(psa ~ volume)
#sumário do modelo
summary(reg_linear)
volume <- dados$lcavol
psa <- dados$lpsa
#obtendo a regressão linear
reg_linear <- lm(psa ~ volume)
summary(reg_linear)
predicoes <- predict.lm(reg_linear, dados)
residuos = psa - predicoes
plot(predicoes, volume)
plot(predicoes, psa)
plot(psa, predicoes)
abline(0,1,col="blue",lty=2,lwd=2)
plot(psa, predicoes)
plot(psa, predicoes, ylab = "Valores Previstos", xlab = "Valores Observados")
qplot(psa, predicoes, ylab = "Valores Previstos", xlab = "Valores Observados")
qplot(psa, predicoes, ylab = "Valores Previstos", xlab = "Valores Observados") +
geom_abline(lty=2, lwd=2)
qplot(psa, predicoes, ylab = "Valores Previstos", xlab = "Valores Observados") +
geom_abline(0,1)
qplot(psa, predicoes, ylab = "Valores Previstos", xlab = "Valores Observados") +
geom_abline()
qplot(psa, predicoes, ylab = "Valores Previstos", xlab = "Valores Observados") +
geom_abline(color='blue')
qplot(psa, predicoes, ylab = "Valores Previstos", xlab = "Valores Observados") +
geom_abline(color='blue',lty=2,lwd=2)
qplot(psa, predicoes, ylab = "Valores Previstos", xlab = "Valores Observados") +
geom_abline(color='blue',lty=2,lwd=1)
qplot(psa, predicoes, ylab = "Valores Previstos", xlab = "Valores Observados") +
geom_abline(color='blue')
qplot(psa, predicoes, ylab = "Valores Previstos", xlab = "Valores Observados") +
geom_abline(color='blue',lty=2,lwd=1,5)
qplot(psa, predicoes, ylab = "Valores Previstos", xlab = "Valores Observados") +
geom_abline(color='blue',lty=2,lwd=1.5)
qplot(psa, predicoes, ylab = "Valores Previstos", xlab = "Valores Observados") +
geom_abline(color='blue')
qplot(predicoes, residuos)
qplot(predicoes, residuos, ylab = "Resíduos", xlab = "Predições") +
geom_abline(color='blue')
qplot(predicoes, residuos, ylab = "Resíduos", xlab = "Predições") +
geom_hline(yintercept = 0, color='blue')
RMSE(predicoes, psa)
cor(dados[,nums])
correlations
#dados de treino
dados_treino <- filter(dados, train == TRUE)
#dados de teste
dados_teste <- filter(dados, train == FALSE)
nums <- sapply(dados_treino, is.numeric)
cor(dados_treino[,nums])
summary(dados)
ggplot(dados$lcavol)
ggplot(dados$lcavol) + geom_histogram()
ggplot(melt(dados$lcavol) + geom_histogram()
ggplot(melt(dados$lcavol)) + geom_histogram()
ggplot(dados$lcavol, aes(x=pred,y=obs)) + geom_histogram()
RMSE(predicoes, psa)
trainIndex <- createDataPartition(dados$train, p=.75, list=FALSE)
View(trainIndex)
dados[trainIndex,]
dados[-trainIndex,]
volume <- dados_treino$lcavol
psa <- dados_treino$lpsa
#obtendo a regressão linear
reg_linear <- lm(psa ~ volume)
#sumário do modelo
summary(reg_linear)
predicoes <- predict.lm(reg_linear, dados_teste)
dados_treino <- filter(dados, train == TRUE)
dados_teste <- filter(dados, train == FALSE)
predicoes <- predict.lm(reg_linear, dados_teste)
residuos = dados_teste$lpsa - predicoes
qplot(predicoes, residuos, ylab = "Resíduos", xlab = "Predições") +
geom_hline(yintercept = 0, color='blue')
RMSE(predicoes, dados_teste$lpsa)
library(gmodels)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(dplyr)
library(caret)
dados <- read.table("dados.txt", header=T, dec=".")
#dados de treino
dados_treino <- filter(dados, train == TRUE)
#dados de teste
dados_teste <- filter(dados, train == FALSE)
plot_vol <- qplot(dados$lcavol, dados$lpsa, xlab = "lcavol", ylab ="PSA")
plot_weight <- qplot(dados$lweight, dados$lpsa, xlab = "lweight", ylab ="PSA")
plot_age <- qplot(dados$age, dados$lpsa, xlab = "age", ylab ="PSA")
plot_bph <- qplot(dados$lbph, dados$lpsa, xlab = "lbph", ylab ="PSA")
plot_svi <- qplot(dados$svi, dados$lpsa, xlab = "svi", ylab ="PSA")
plot_cp <- qplot(dados$lcp, dados$lpsa, xlab = "lcp", ylab ="PSA")
plot_gleason <- qplot(dados$gleason, dados$lpsa, xlab = "gleason", ylab ="PSA")
plot_pgg45 <- qplot(dados$pgg45, dados$lpsa, xlab = "pgg45", ylab ="PSA")
nums <- sapply(dados, is.numeric)
cor(dados[,nums])
correlations <- cor(dados[,nums])
corrplot(correlations, order="hclust")
corrplot(correlations, order="hclust", type="lower")
cor(dados[,nums])
#definindo variáveis
volume <- dados_treino$lcavol
psa <- dados_treino$lpsa
#obtendo a regressão linear
reg_linear <- lm(psa ~ volume)
summary(reg_linear)
predicoes <- predict.lm(reg_linear, dados_teste)
library(gmodels)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(dplyr)
library(caret)
dados <- read.table("dados.txt", header=T, dec=".")
#dados de treino
dados_treino <- filter(dados, train == TRUE)
#dados de teste
dados_teste <- filter(dados, train == FALSE)
#Criando gráficos
plot_vol <- qplot(dados$lcavol, dados$lpsa, xlab = "lcavol", ylab ="PSA")
plot_weight <- qplot(dados$lweight, dados$lpsa, xlab = "lweight", ylab ="PSA")
plot_age <- qplot(dados$age, dados$lpsa, xlab = "age", ylab ="PSA")
plot_bph <- qplot(dados$lbph, dados$lpsa, xlab = "lbph", ylab ="PSA")
plot_svi <- qplot(dados$svi, dados$lpsa, xlab = "svi", ylab ="PSA")
plot_cp <- qplot(dados$lcp, dados$lpsa, xlab = "lcp", ylab ="PSA")
plot_gleason <- qplot(dados$gleason, dados$lpsa, xlab = "gleason", ylab ="PSA")
plot_pgg45 <- qplot(dados$pgg45, dados$lpsa, xlab = "pgg45", ylab ="PSA")
nums <- sapply(dados, is.numeric)
cor(dados[,nums])
correlations <- cor(dados[,nums])
corrplot(correlations, order="hclust", type="lower")
volume <- dados_treino$lcavol
psa <- dados_treino$lpsa
reg_linear <- lm(psa ~ volume)
summary(reg_linear)
predicoes <- predict.lm(reg_linear, dados_teste)
qplot(dados_teste$lpsa, predicoes, ylab = "Valores Previstos", xlab = "Valores Observados") +
geom_abline(color='blue')
predicoes <- predict.lm(reg_linear, dados)
predicoes <- predict.lm(reg_linear, dados_treino)
qplot(dados_teste$lpsa, predicoes, ylab = "Valores Previstos", xlab = "Valores Observados") +
geom_abline(color='blue')
qplot(dados_treino$lpsa, predicoes, ylab = "Valores Previstos", xlab = "Valores Observados") +
geom_abline(color='blue')
predict.lm(reg_linear, select(dados_teste, lcavol))
predict.lm(reg_linear, dados_treino)
predicoes <- predict.lm(reg_linear, dados_treino)
predicoes <- predict.lm(reg_linear, dados_teste)
qplot(dados_teste$lpsa, predicoes, ylab = "Valores Previstos", xlab = "Valores Observados") +
geom_abline(color='blue')
residuos = dados_teste$lpsa - predicoes
volume <- dados$lcavol
psa <- dados$lpsa
reg_linear <- lm(psa ~ volume)
predicoes <- predict.lm(reg_linear, dados)
qplot(psa, predicoes, ylab = "Valores Previstos", xlab = "Valores Observados") +
geom_abline(color='blue')
residuos = psa - predicoes
residuos
qplot(predicoes, residuos, ylab = "Resíduos", xlab = "Predições") +
geom_hline(yintercept = 0, color='blue')
RMSE(predicoes, dados_teste$lpsa)
RMSE(predicoes, psa)
predict(reg_linear, dados)
predict.lm(reg_linear, dados)
RMSE(predicoes, dados_teste$lpsa)
RMSE(predicoes, dados)
RMSE(predicoes, dados_teste$lpsa)
#qplot(dados_treino$lpsa, predicoes, ylab = "Valores Previstos", xlab = "Valores Observados") +
#  geom_abline(color='blue')
qplot(dados_treino$lpsa, predicoes, ylab = "Valores Previstos", xlab = "Valores Observados") +
geom_abline(color='blue')
ggplot(lm_predicoes, aes(x = pred, y = obs)) + geom_point(alpha = 0.5, position = position_jitter(width=0.2)) + geom_abline(colour = "blue") + ggtitle("Previsão x Observado (validação)")
lm_predicoes <- data.frame(pred = predicoes, obs = dados_teste$lpsa)
train <- filter(dados,train)
train
test <- filter(dados,!train)
test
lm <- lm(lpsa ~ lcavol+svi+lcp,data = train)
prediction <- predict(lm, select(test,lcavol, svi, lcp))
lm_prediction <- data.frame(pred = prediction, obs = test$lpsa)
ggplot(lm_prediction, aes(x = pred, y = obs)) + geom_point(alpha = 0.5, position = position_jitter(width=0.2)) + geom_abline(colour = "blue") + ggtitle("Previsão x Observado (validação)")
round(defaultSummary(lm_prediction), digits = 3)
corrplot(correlationMatrix, method="circle", type="lower", order="hclust")
predicoes <- predict(reg_linear, select(dados_teste, lcavol))
dados <- read.table("dados.txt", header=T, dec=".")
#dados de treino
dados_treino <- filter(dados, train == TRUE)
#dados de teste
dados_teste <- filter(dados, train == FALSE)
dados <- read.table("dados.txt", header=T, dec=".")
#dados de treino
dados_treino <- filter(dados, train == TRUE)
#dados de teste
dados_teste <- filter(dados, train == FALSE)
dados_treino <- filter(dados, train == TRUE)
dados_treino <- filter(dados, train)
library(gmodels)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(dplyr)
library(caret)
library(lars)
dados <- read.table("dados.txt", header=T, dec=".")
dados_treino <- filter(dados, train == TRUE)
#dados de teste
dados_teste <- filter(dados, train == FALSE)
nums <- sapply(dados, is.numeric)
correlations <- cor(dados[,nums])
corrplot(correlations, order="hclust", type="lower")
reg_linear <- lm(lpsa ~ lcavol+svi+lcp, data = dados_treino)
predicoes <- predict(reg_linear, select(dados_teste,lcavol, svi, lcp))
lm_predicoes <- data.frame(pred = predicoes, obs = dados_teste$lpsa)
residuos = dados_teste$lpsa - predicoes
RMSE(predicoes, dados_teste$lpsa)
lasso.fit <- train(lpsa ~ ., data=select(dados_treino, lcavol, lweight, age, lbph, svi, lcp, gleason, pgg45, lpsa), method='lasso', metric='RMSE',tuneLength=10)
library(elasticnet)
